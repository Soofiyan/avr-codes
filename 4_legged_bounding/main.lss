
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800200  00800200  000002ba  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000310  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8b  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c72  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000639  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  000029e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_51>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 32       	cpi	r26, 0x21	; 33
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 0c 01 	call	0x218	; 0x218 <main>
 108:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <bluetooth_init>:
float result;


void bluetooth_init(void)
{
    DDRH |= (1<<PH2);
 110:	e1 e0       	ldi	r30, 0x01	; 1
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
    PORTH |= (1<<PH2);//bluetooth
 11a:	e2 e0       	ldi	r30, 0x02	; 2
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	80 81       	ld	r24, Z
 120:	84 60       	ori	r24, 0x04	; 4
 122:	80 83       	st	Z, r24
}
 124:	08 95       	ret

00000126 <usart_init>:

void usart_init(void)
{
    UBRR2H=BAUDRATE>>8;
 126:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    UBRR2L=BAUDRATE;
 12a:	8f e5       	ldi	r24, 0x5F	; 95
 12c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    UCSR2B=0b10011000;//enable RXEN TXEN
 130:	88 e9       	ldi	r24, 0x98	; 152
 132:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    UCSR2C=0b00000110;// UCSZ1 UCSZ0
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
}
 13c:	08 95       	ret

0000013e <ps2_values>:

void ps2_values(void)
{
    if (butt[10]==1)//up
 13e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <butt+0xa>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	11 f4       	brne	.+4      	; 0x14a <ps2_values+0xc>
    {
        butt[10] = 0;
 146:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <butt+0xa>
    }
    if (butt[11]==1)//left
 14a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <butt+0xb>
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	11 f4       	brne	.+4      	; 0x156 <ps2_values+0x18>
    {
        butt[11] = 0;
 152:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <butt+0xb>
    }
    if (butt[12]==1)//down
 156:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <butt+0xc>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	11 f4       	brne	.+4      	; 0x162 <ps2_values+0x24>
    {
        butt[12] = 0;
 15e:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <butt+0xc>
    }
    if (butt[13]==1)//right
 162:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <butt+0xd>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	11 f4       	brne	.+4      	; 0x16e <ps2_values+0x30>
    {
        butt[13] = 0;
 16a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <butt+0xd>
    }
    if (butt[14]==1)//start
 16e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <butt+0xe>
 172:	91 30       	cpi	r25, 0x01	; 1
 174:	39 f4       	brne	.+14     	; 0x184 <ps2_values+0x46>
    {
        start ^= 1;
 176:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 17a:	89 27       	eor	r24, r25
 17c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
        butt[14] = 0;
 180:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <butt+0xe>
    }
}
 184:	08 95       	ret

00000186 <receive>:

void receive(void)
{
    if ((RX_raw>200) && (RX_raw<255))
 186:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <RX_raw>
 18a:	87 e3       	ldi	r24, 0x37	; 55
 18c:	8e 0f       	add	r24, r30
 18e:	86 33       	cpi	r24, 0x36	; 54
 190:	58 f4       	brcc	.+22     	; 0x1a8 <receive+0x22>
    {
        RX_ad1=RX_raw;
 192:	e0 93 17 02 	sts	0x0217, r30	; 0x800217 <RX_ad1>
        if ((RX_raw>230) && (RX_raw<247))
 196:	e7 5e       	subi	r30, 0xE7	; 231
 198:	e0 31       	cpi	r30, 0x10	; 16
 19a:	88 f4       	brcc	.+34     	; 0x1be <receive+0x38>
        {
            uint8_t r_temp0=(RX_raw-231);
            butt[r_temp0]=1;
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ed 5f       	subi	r30, 0xFD	; 253
 1a0:	fd 4f       	sbci	r31, 0xFD	; 253
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 83       	st	Z, r24
 1a6:	08 95       	ret
        }
    }
    else if ((RX_raw>=0) && (RX_raw<201))
 1a8:	e9 3c       	cpi	r30, 0xC9	; 201
 1aa:	48 f4       	brcc	.+18     	; 0x1be <receive+0x38>
    {
        uint8_t r_temp1=(RX_ad1-201);
 1ac:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <RX_ad1>
 1b0:	a9 5c       	subi	r26, 0xC9	; 201
        if (r_temp1<16)
 1b2:	a0 31       	cpi	r26, 0x10	; 16
 1b4:	20 f4       	brcc	.+8      	; 0x1be <receive+0x38>
        {
            RX[r_temp1]=RX_raw;
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	ad 5e       	subi	r26, 0xED	; 237
 1ba:	bd 4f       	sbci	r27, 0xFD	; 253
 1bc:	ec 93       	st	X, r30
        }
    }
}
 1be:	08 95       	ret

000001c0 <__vector_51>:

ISR(USART2_RX_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	0b b6       	in	r0, 0x3b	; 59
 1cc:	0f 92       	push	r0
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
    RX_raw=UDR2;
 1e6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 1ea:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <RX_raw>
    receive();
 1ee:	0e 94 c3 00 	call	0x186	; 0x186 <receive>
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0b be       	out	0x3b, r0	; 59
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <main>:

int main()
{
    bluetooth_init();
 218:	0e 94 88 00 	call	0x110	; 0x110 <bluetooth_init>
    usart_init();
 21c:	0e 94 93 00 	call	0x126	; 0x126 <usart_init>
    
    while(1)
    {
    }
 220:	ff cf       	rjmp	.-2      	; 0x220 <main+0x8>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
