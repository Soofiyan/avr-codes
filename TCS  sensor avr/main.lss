
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000660  000006f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800200  00800200  000006f4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000748  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001761  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d68  00000000  00000000  00001f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001309  00000000  00000000  00002c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00003fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ee  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095b  00000000  00000000  000047aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005105  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	aa 31       	cpi	r26, 0x1A	; 26
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 42 02 	call	0x484	; 0x484 <main>
 108:	0c 94 2e 03 	jmp	0x65c	; 0x65c <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
    DDRC = DDRC | 0xF0; //all the LCD pin's direction set as output
 110:	87 b1       	in	r24, 0x07	; 7
 112:	80 6f       	ori	r24, 0xF0	; 240
 114:	87 b9       	out	0x07, r24	; 7
    DDRA |= 0xA8;
 116:	81 b1       	in	r24, 0x01	; 1
 118:	88 6a       	ori	r24, 0xA8	; 168
 11a:	81 b9       	out	0x01, r24	; 1
    PORTC = PORTC & 0x0F; // all the LCD pins are set to logic 0 except PORTC 7
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	88 b9       	out	0x08, r24	; 8
    PORTA &= 0x57;
 122:	82 b1       	in	r24, 0x02	; 2
 124:	87 75       	andi	r24, 0x57	; 87
 126:	82 b9       	out	0x02, r24	; 2
}
 128:	08 95       	ret

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e9       	ldi	r24, 0x9F	; 159
 12c:	9f e0       	ldi	r25, 0x0F	; 15
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_set_4bit+0xa>
 134:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
    _delay_ms(1);
    
    cbit(PORTA,RS);                //RS=0 --- Command Input
 136:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA,RW);                //RW=0 --- Writing to LCD
 138:	15 98       	cbi	0x02, 5	; 2
    lcd_port = 0x30;                //Sending 3
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA,EN);                //Set Enable Pin
 13e:	17 9a       	sbi	0x02, 7	; 2
 140:	ef e1       	ldi	r30, 0x1F	; 31
 142:	fe e4       	ldi	r31, 0x4E	; 78
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_set_4bit+0x20>
 14a:	00 00       	nop
    _delay_ms(5);                    //Delay
    cbit(PORTA,EN);                //Clear Enable Pin
 14c:	17 98       	cbi	0x02, 7	; 2
 14e:	ef e9       	ldi	r30, 0x9F	; 159
 150:	ff e0       	ldi	r31, 0x0F	; 15
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_set_4bit+0x28>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_set_4bit+0x2e>
 158:	00 00       	nop
    
    _delay_ms(1);
    
    cbit(PORTA,RS);                //RS=0 --- Command Input
 15a:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA,RW);                //RW=0 --- Writing to LCD
 15c:	15 98       	cbi	0x02, 5	; 2
    lcd_port = 0x30;                //Sending 3
 15e:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA,EN);                //Set Enable Pin
 160:	17 9a       	sbi	0x02, 7	; 2
 162:	ef e1       	ldi	r30, 0x1F	; 31
 164:	fe e4       	ldi	r31, 0x4E	; 78
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_set_4bit+0x3c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_set_4bit+0x42>
 16c:	00 00       	nop
    _delay_ms(5);                    //Delay
    cbit(PORTA,EN);                //Clear Enable Pin
 16e:	17 98       	cbi	0x02, 7	; 2
 170:	ef e9       	ldi	r30, 0x9F	; 159
 172:	ff e0       	ldi	r31, 0x0F	; 15
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_set_4bit+0x4a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_set_4bit+0x50>
 17a:	00 00       	nop
    
    _delay_ms(1);
    
    cbit(PORTA,RS);                //RS=0 --- Command Input
 17c:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA,RW);                //RW=0 --- Writing to LCD
 17e:	15 98       	cbi	0x02, 5	; 2
    lcd_port = 0x30;                //Sending 3
 180:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA,EN);                //Set Enable Pin
 182:	17 9a       	sbi	0x02, 7	; 2
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	9e e4       	ldi	r25, 0x4E	; 78
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_set_4bit+0x5e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_set_4bit+0x64>
 18e:	00 00       	nop
    _delay_ms(5);                    //Delay
    cbit(PORTA,EN);                //Clear Enable Pin
 190:	17 98       	cbi	0x02, 7	; 2
 192:	ef e9       	ldi	r30, 0x9F	; 159
 194:	ff e0       	ldi	r31, 0x0F	; 15
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_set_4bit+0x6c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_set_4bit+0x72>
 19c:	00 00       	nop
    
    _delay_ms(1);
    
    cbit(PORTA,RS);                //RS=0 --- Command Input
 19e:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA,RW);                //RW=0 --- Writing to LCD
 1a0:	15 98       	cbi	0x02, 5	; 2
    lcd_port = 0x20;                //Sending 2 to initialise LCD 4-bit mode
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA,EN);                //Set Enable Pin
 1a6:	17 9a       	sbi	0x02, 7	; 2
 1a8:	8f e1       	ldi	r24, 0x1F	; 31
 1aa:	9e e4       	ldi	r25, 0x4E	; 78
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_set_4bit+0x82>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_set_4bit+0x88>
 1b2:	00 00       	nop
    _delay_ms(5);                    //Delay
    cbit(PORTA,EN);                //Clear Enable Pin
 1b4:	17 98       	cbi	0x02, 7	; 2
    
    
}
 1b6:	08 95       	ret

000001b8 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
    unsigned char temp;
    temp = cmd;
    temp = temp & 0xF0;
    lcd_port &= 0x0F;
 1b8:	98 b1       	in	r25, 0x08	; 8
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	98 b9       	out	0x08, r25	; 8
    lcd_port |= temp;
 1be:	28 b1       	in	r18, 0x08	; 8
    temp = temp & 0xF0;
 1c0:	98 2f       	mov	r25, r24
 1c2:	90 7f       	andi	r25, 0xF0	; 240
    lcd_port |= temp;
 1c4:	92 2b       	or	r25, r18
 1c6:	98 b9       	out	0x08, r25	; 8
    cbit(PORTA,RS);
 1c8:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA,RW);
 1ca:	15 98       	cbi	0x02, 5	; 2
    sbit(PORTA,EN);
 1cc:	17 9a       	sbi	0x02, 7	; 2
 1ce:	ef e1       	ldi	r30, 0x1F	; 31
 1d0:	fe e4       	ldi	r31, 0x4E	; 78
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_wr_command+0x1a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_wr_command+0x20>
 1d8:	00 00       	nop
    _delay_ms(5);
    cbit(PORTA,EN);
 1da:	17 98       	cbi	0x02, 7	; 2
    
    cmd = cmd & 0x0F;
    cmd = cmd<<4;
    lcd_port &= 0x0F;
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	9f 70       	andi	r25, 0x0F	; 15
 1e0:	98 b9       	out	0x08, r25	; 8
    lcd_port |= cmd;
 1e2:	98 b1       	in	r25, 0x08	; 8
 1e4:	82 95       	swap	r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	89 2b       	or	r24, r25
 1ea:	88 b9       	out	0x08, r24	; 8
    cbit(PORTA,RS);
 1ec:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA,RW);
 1ee:	15 98       	cbi	0x02, 5	; 2
    sbit(PORTA,EN);
 1f0:	17 9a       	sbi	0x02, 7	; 2
 1f2:	8f e1       	ldi	r24, 0x1F	; 31
 1f4:	9e e4       	ldi	r25, 0x4E	; 78
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_wr_command+0x3e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_wr_command+0x44>
 1fc:	00 00       	nop
    _delay_ms(5);
    cbit(PORTA,EN);
 1fe:	17 98       	cbi	0x02, 7	; 2
}
 200:	08 95       	ret

00000202 <lcd_init>:
    lcd_set_4bit();
 202:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_init+0x8>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd_init+0xe>
 210:	00 00       	nop
    lcd_wr_command(0x28);            //LCD 4-bit mode and 2 lines.
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
    lcd_wr_command(0x01);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
    lcd_wr_command(0x06);
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
    lcd_wr_command(0x0E);
 224:	8e e0       	ldi	r24, 0x0E	; 14
 226:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
    lcd_wr_command(0x80);
 22a:	80 e8       	ldi	r24, 0x80	; 128
 22c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <lcd_wr_command>

00000230 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
    char temp;
    temp = letter;
    temp = (temp & 0xF0);
    lcd_port &= 0x0F;
 230:	98 b1       	in	r25, 0x08	; 8
 232:	9f 70       	andi	r25, 0x0F	; 15
 234:	98 b9       	out	0x08, r25	; 8
    lcd_port |= temp;
 236:	28 b1       	in	r18, 0x08	; 8
    temp = (temp & 0xF0);
 238:	98 2f       	mov	r25, r24
 23a:	90 7f       	andi	r25, 0xF0	; 240
    lcd_port |= temp;
 23c:	92 2b       	or	r25, r18
 23e:	98 b9       	out	0x08, r25	; 8
    sbit(PORTA,RS);
 240:	13 9a       	sbi	0x02, 3	; 2
    cbit(PORTA,RW);
 242:	15 98       	cbi	0x02, 5	; 2
    sbit(PORTA,EN);
 244:	17 9a       	sbi	0x02, 7	; 2
 246:	ef e1       	ldi	r30, 0x1F	; 31
 248:	fe e4       	ldi	r31, 0x4E	; 78
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_char+0x1a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_wr_char+0x20>
 250:	00 00       	nop
    _delay_ms(5);
    cbit(PORTA,EN);
 252:	17 98       	cbi	0x02, 7	; 2
    
    letter = letter & 0x0F;
    letter = letter<<4;
    lcd_port &= 0x0F;
 254:	98 b1       	in	r25, 0x08	; 8
 256:	9f 70       	andi	r25, 0x0F	; 15
 258:	98 b9       	out	0x08, r25	; 8
    lcd_port |= letter;
 25a:	98 b1       	in	r25, 0x08	; 8
 25c:	82 95       	swap	r24
 25e:	80 7f       	andi	r24, 0xF0	; 240
 260:	89 2b       	or	r24, r25
 262:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA,RS);
 264:	13 9a       	sbi	0x02, 3	; 2
    cbit(PORTA,RW);
 266:	15 98       	cbi	0x02, 5	; 2
    sbit(PORTA,EN);
 268:	17 9a       	sbi	0x02, 7	; 2
 26a:	8f e1       	ldi	r24, 0x1F	; 31
 26c:	9e e4       	ldi	r25, 0x4E	; 78
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_wr_char+0x3e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_wr_char+0x44>
 274:	00 00       	nop
    _delay_ms(5);
    cbit(PORTA,EN);
 276:	17 98       	cbi	0x02, 7	; 2
}
 278:	08 95       	ret

0000027a <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    lcd_wr_command(0x80);
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <lcd_wr_command>

00000280 <lcd_string>:
}


//Function to Print String on LCD
void lcd_string(char *str)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ec 01       	movw	r28, r24
    while(*str != '\0')
 286:	89 91       	ld	r24, Y+
 288:	81 11       	cpse	r24, r1
 28a:	03 c0       	rjmp	.+6      	; 0x292 <lcd_string+0x12>
    {
        lcd_wr_char(*str);
        str++;
    }
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret
        lcd_wr_char(*str);
 292:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
        str++;
 296:	f7 cf       	rjmp	.-18     	; 0x286 <lcd_string+0x6>

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
 298:	98 2f       	mov	r25, r24
 29a:	86 2f       	mov	r24, r22
    switch (row) {
 29c:	92 30       	cpi	r25, 0x02	; 2
 29e:	59 f0       	breq	.+22     	; 0x2b6 <lcd_cursor+0x1e>
 2a0:	20 f4       	brcc	.+8      	; 0x2aa <lcd_cursor+0x12>
        case 1: lcd_wr_command (0x80 + column - 1); break;
 2a2:	81 58       	subi	r24, 0x81	; 129
 2a4:	91 30       	cpi	r25, 0x01	; 1
 2a6:	41 f0       	breq	.+16     	; 0x2b8 <lcd_cursor+0x20>
 2a8:	08 95       	ret
 2aa:	93 30       	cpi	r25, 0x03	; 3
 2ac:	39 f0       	breq	.+14     	; 0x2bc <lcd_cursor+0x24>
        case 2: lcd_wr_command (0xc0 + column - 1); break;
        case 3: lcd_wr_command (0x94 + column - 1); break;
        case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ae:	8d 52       	subi	r24, 0x2D	; 45
 2b0:	94 30       	cpi	r25, 0x04	; 4
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <lcd_cursor+0x20>
 2b4:	08 95       	ret
        case 2: lcd_wr_command (0xc0 + column - 1); break;
 2b6:	81 54       	subi	r24, 0x41	; 65
        case 4: lcd_wr_command (0xd4 + column - 1); break;
 2b8:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <lcd_wr_command>
        case 3: lcd_wr_command (0x94 + column - 1); break;
 2bc:	8d 56       	subi	r24, 0x6D	; 109
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <lcd_cursor+0x20>

000002c0 <lcd_print>:
    }
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	8a 01       	movw	r16, r20
 2ca:	e9 01       	movw	r28, r18
    unsigned char flag=0;
    if(row==0||coloumn==0)
 2cc:	88 23       	and	r24, r24
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <lcd_print+0x14>
 2d0:	61 11       	cpse	r22, r1
 2d2:	67 c0       	rjmp	.+206    	; 0x3a2 <lcd_print+0xe2>
    {
        lcd_home();
 2d4:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_home>
    }
    else
    {
        lcd_cursor(row,coloumn);
    }
    if(digits==5 || flag==1)
 2d8:	c5 30       	cpi	r28, 0x05	; 5
 2da:	d1 05       	cpc	r29, r1
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <lcd_print+0x20>
 2de:	64 c0       	rjmp	.+200    	; 0x3a8 <lcd_print+0xe8>
    {
        million=value/10000+48;
 2e0:	c8 01       	movw	r24, r16
 2e2:	60 e1       	ldi	r22, 0x10	; 16
 2e4:	77 e2       	ldi	r23, 0x27	; 39
 2e6:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 2ea:	cb 01       	movw	r24, r22
 2ec:	c0 96       	adiw	r24, 0x30	; 48
 2ee:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <million+0x1>
 2f2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <million>
        lcd_wr_char(million);
 2f6:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
        flag=1;
    }
    if(digits==4 || flag==1)
    {
        temp = value/1000;
 2fa:	c8 01       	movw	r24, r16
 2fc:	68 ee       	ldi	r22, 0xE8	; 232
 2fe:	73 e0       	ldi	r23, 0x03	; 3
 300:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 304:	cb 01       	movw	r24, r22
 306:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <temp+0x1>
 30a:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <temp>
        thousand = temp%10 + 48;
 30e:	6a e0       	ldi	r22, 0x0A	; 10
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 316:	c0 96       	adiw	r24, 0x30	; 48
 318:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <thousand+0x1>
 31c:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <thousand>
        lcd_wr_char(thousand);
 320:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
        flag=1;
    }
    if(digits==3 || flag==1)
    {
        temp = value/100;
 324:	c8 01       	movw	r24, r16
 326:	64 e6       	ldi	r22, 0x64	; 100
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 32e:	cb 01       	movw	r24, r22
 330:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <temp+0x1>
 334:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <temp>
        hundred = temp%10 + 48;
 338:	6a e0       	ldi	r22, 0x0A	; 10
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 340:	c0 96       	adiw	r24, 0x30	; 48
 342:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <hundred+0x1>
 346:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <hundred>
        lcd_wr_char(hundred);
 34a:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
        flag=1;
    }
    if(digits==2 || flag==1)
    {
        temp = value/10;
 34e:	2a e0       	ldi	r18, 0x0A	; 10
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	c8 01       	movw	r24, r16
 354:	b9 01       	movw	r22, r18
 356:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 35a:	cb 01       	movw	r24, r22
 35c:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <temp+0x1>
 360:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <temp>
        tens = temp%10 + 48;
 364:	b9 01       	movw	r22, r18
 366:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 36a:	c0 96       	adiw	r24, 0x30	; 48
 36c:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <tens+0x1>
 370:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <tens>
        lcd_wr_char(tens);
 374:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
        flag=1;
    }
    if(digits==1 || flag==1)
    {
        unit = value%10 + 48;
 378:	c8 01       	movw	r24, r16
 37a:	6a e0       	ldi	r22, 0x0A	; 10
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 382:	c0 96       	adiw	r24, 0x30	; 48
 384:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <unit+0x1>
 388:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <unit>
        lcd_wr_char(unit);
 38c:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
    }
    if(digits>5)
 390:	26 97       	sbiw	r28, 0x06	; 6
 392:	cc f0       	brlt	.+50     	; 0x3c6 <lcd_print+0x106>
    {
        lcd_wr_char('E');
 394:	85 e4       	ldi	r24, 0x45	; 69
    }
    
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
        lcd_wr_char('E');
 39e:	0c 94 18 01 	jmp	0x230	; 0x230 <lcd_wr_char>
        lcd_cursor(row,coloumn);
 3a2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
 3a6:	98 cf       	rjmp	.-208    	; 0x2d8 <lcd_print+0x18>
    if(digits==4 || flag==1)
 3a8:	c4 30       	cpi	r28, 0x04	; 4
 3aa:	d1 05       	cpc	r29, r1
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <lcd_print+0xf0>
 3ae:	a5 cf       	rjmp	.-182    	; 0x2fa <lcd_print+0x3a>
    if(digits==3 || flag==1)
 3b0:	c3 30       	cpi	r28, 0x03	; 3
 3b2:	d1 05       	cpc	r29, r1
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <lcd_print+0xf8>
 3b6:	b6 cf       	rjmp	.-148    	; 0x324 <lcd_print+0x64>
    if(digits==2 || flag==1)
 3b8:	c2 30       	cpi	r28, 0x02	; 2
 3ba:	d1 05       	cpc	r29, r1
 3bc:	41 f2       	breq	.-112    	; 0x34e <lcd_print+0x8e>
    if(digits==1 || flag==1)
 3be:	c1 30       	cpi	r28, 0x01	; 1
 3c0:	d1 05       	cpc	r29, r1
 3c2:	31 f7       	brne	.-52     	; 0x390 <lcd_print+0xd0>
 3c4:	d9 cf       	rjmp	.-78     	; 0x378 <lcd_print+0xb8>
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	08 95       	ret

000003d0 <timer5_init>:
uint8_t colour;


void timer5_init(void)
{
    TCCR5A = 0x00;
 3d0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    TCCR5B |= (1<<CS50);
 3d4:	e1 e2       	ldi	r30, 0x21	; 33
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	80 81       	ld	r24, Z
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	80 83       	st	Z, r24
    TCNT5 = 0;
 3de:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 3e2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
}
 3e6:	08 95       	ret

000003e8 <timer5_reset>:

void timer5_reset(void)
{
    TCCR5A = 0x00;
 3e8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    TCCR5B = 0x00;
 3ec:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    TCNT5 = 0;
 3f0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 3f4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
}
 3f8:	08 95       	ret

000003fa <tcs_init>:

void tcs_init(void)
{
    DDRB |= 0xF0;//s0 s1 s3 s2
 3fa:	84 b1       	in	r24, 0x04	; 4
 3fc:	80 6f       	ori	r24, 0xF0	; 240
 3fe:	84 b9       	out	0x04, r24	; 4
    DDRD &= ~(1<<0);//input pin
 400:	50 98       	cbi	0x0a, 0	; 10
    PORTB |= (1<<5);
 402:	2d 9a       	sbi	0x05, 5	; 5
    PORTB &= ~(1<<4);
 404:	2c 98       	cbi	0x05, 4	; 5
}
 406:	08 95       	ret

00000408 <tcs_sensor_value>:

uint8_t tcs_sensor_value(void)
{
    PORTB &= ~((1<<6));
 408:	2e 98       	cbi	0x05, 6	; 5
    PORTB |= (1<<7);//no filter
 40a:	2f 9a       	sbi	0x05, 7	; 5
    if(!(PIND & (1<<0)))
 40c:	48 99       	sbic	0x09, 0	; 9
 40e:	02 c0       	rjmp	.+4      	; 0x414 <tcs_sensor_value+0xc>
    {
        while(!(PIND & (1<<0)));
 410:	48 9b       	sbis	0x09, 0	; 9
 412:	fe cf       	rjmp	.-4      	; 0x410 <tcs_sensor_value+0x8>
    }
    while((PIND & (1<<0)));//Wait for falling edge
 414:	48 99       	sbic	0x09, 0	; 9
 416:	fe cf       	rjmp	.-4      	; 0x414 <tcs_sensor_value+0xc>
    timer5_init();
 418:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
    while(!(PIND & (1<<0)));//Wait for rising edge
 41c:	48 9b       	sbis	0x09, 0	; 9
 41e:	fe cf       	rjmp	.-4      	; 0x41c <tcs_sensor_value+0x14>
    result = TCNT5;
 420:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 424:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 428:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <result+0x1>
 42c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <result>
    timer5_reset();
 430:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <timer5_reset>
    lcd_print(1,1,result,5);
 434:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <result>
 438:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <result+0x1>
 43c:	25 e0       	ldi	r18, 0x05	; 5
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	41 ee       	ldi	r20, 0xE1	; 225
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	40 40       	sbci	r20, 0x00	; 0
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <tcs_sensor_value+0x46>
 456:	00 c0       	rjmp	.+0      	; 0x458 <tcs_sensor_value+0x50>
 458:	00 00       	nop
    _delay_ms(100);
    if(result >= red_min && result <= red_max)
 45a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <result>
 45e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <result+0x1>
 462:	9c 01       	movw	r18, r24
 464:	28 5c       	subi	r18, 0xC8	; 200
 466:	32 43       	sbci	r19, 0x32	; 50
 468:	29 38       	cpi	r18, 0x89	; 137
 46a:	33 41       	sbci	r19, 0x13	; 19
 46c:	38 f0       	brcs	.+14     	; 0x47c <tcs_sensor_value+0x74>
    {
        return 1;
    }
    else if(result >= green_min && result <= green_max)
 46e:	80 55       	subi	r24, 0x50	; 80
 470:	96 44       	sbci	r25, 0x46	; 70
 472:	89 38       	cpi	r24, 0x89	; 137
 474:	93 41       	sbci	r25, 0x13	; 19
 476:	20 f0       	brcs	.+8      	; 0x480 <tcs_sensor_value+0x78>
    {
        return 3;
    }
    else
    {
        return 0;
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	08 95       	ret
        return 1;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	08 95       	ret
        return 2;
 480:	82 e0       	ldi	r24, 0x02	; 2
    }
}
 482:	08 95       	ret

00000484 <main>:

int main(void)
{
    timer5_init();
 484:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
    tcs_init();
 488:	0e 94 fd 01 	call	0x3fa	; 0x3fa <tcs_init>
    lcd_port_config();
 48c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_port_config>
    lcd_init();
 490:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
    DDRK = 0xFF;
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    PORTK = 0xFF;
 49a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
        {
            colour = 2;
        }
        else if(result3 >= blue_min && result3 <= blue_max)
        {
            colour = 3;
 49e:	c3 e0       	ldi	r28, 0x03	; 3
        timer5_init();
 4a0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
        PORTB &= ~((1<<6));
 4a4:	2e 98       	cbi	0x05, 6	; 5
        PORTB &= ~(1<<7);//red
 4a6:	2f 98       	cbi	0x05, 7	; 5
        if(!(PIND & (1<<0)))
 4a8:	48 99       	sbic	0x09, 0	; 9
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <main+0x2c>
            while(!(PIND & (1<<0)));
 4ac:	48 9b       	sbis	0x09, 0	; 9
 4ae:	fe cf       	rjmp	.-4      	; 0x4ac <main+0x28>
        while((PIND & (1<<0)));//Wait for falling edge
 4b0:	48 99       	sbic	0x09, 0	; 9
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <main+0x2c>
        timer5_init();
 4b4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
        while(!(PIND & (1<<0)));//Wait for rising edge
 4b8:	48 9b       	sbis	0x09, 0	; 9
 4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <main+0x34>
        result1 = TCNT5;
 4bc:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 4c0:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 4c4:	50 93 0a 02 	sts	0x020A, r21	; 0x80020a <result1+0x1>
 4c8:	40 93 09 02 	sts	0x0209, r20	; 0x800209 <result1>
        lcd_print(1,1,result1,5);
 4cc:	25 e0       	ldi	r18, 0x05	; 5
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
 4d8:	2f ef       	ldi	r18, 0xFF	; 255
 4da:	41 ee       	ldi	r20, 0xE1	; 225
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	40 40       	sbci	r20, 0x00	; 0
 4e2:	80 40       	sbci	r24, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <main+0x5a>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <main+0x64>
 4e8:	00 00       	nop
        timer5_reset();
 4ea:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <timer5_reset>
        timer5_init();
 4ee:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
        PORTB |= (1<<6)|(1<<7);//green
 4f2:	85 b1       	in	r24, 0x05	; 5
 4f4:	80 6c       	ori	r24, 0xC0	; 192
 4f6:	85 b9       	out	0x05, r24	; 5
        if(!(PIND & (1<<0)))
 4f8:	48 99       	sbic	0x09, 0	; 9
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <main+0x7c>
            while(!(PIND & (1<<0)));
 4fc:	48 9b       	sbis	0x09, 0	; 9
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <main+0x78>
        while((PIND & (1<<0)));//Wait for falling edge
 500:	48 99       	sbic	0x09, 0	; 9
 502:	fe cf       	rjmp	.-4      	; 0x500 <main+0x7c>
        timer5_init();
 504:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
        while(!(PIND & (1<<0)));//Wait for rising edge
 508:	48 9b       	sbis	0x09, 0	; 9
 50a:	fe cf       	rjmp	.-4      	; 0x508 <main+0x84>
        result2 = TCNT5;
 50c:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 510:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 514:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <result2+0x1>
 518:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <result2>
        lcd_print(1,8,result2,5);
 51c:	25 e0       	ldi	r18, 0x05	; 5
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	68 e0       	ldi	r22, 0x08	; 8
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	21 ee       	ldi	r18, 0xE1	; 225
 52c:	44 e0       	ldi	r20, 0x04	; 4
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	20 40       	sbci	r18, 0x00	; 0
 532:	40 40       	sbci	r20, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <main+0xaa>
 536:	00 c0       	rjmp	.+0      	; 0x538 <main+0xb4>
 538:	00 00       	nop
        timer5_reset();
 53a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <timer5_reset>
        timer5_init();
 53e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
        timer5_init();
 542:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
        PORTB &= ~((1<<7));
 546:	2f 98       	cbi	0x05, 7	; 5
        PORTB |= (1<<6);//blue
 548:	2e 9a       	sbi	0x05, 6	; 5
        if(!(PIND & (1<<0)))
 54a:	48 99       	sbic	0x09, 0	; 9
 54c:	02 c0       	rjmp	.+4      	; 0x552 <main+0xce>
            while(!(PIND & (1<<0)));
 54e:	48 9b       	sbis	0x09, 0	; 9
 550:	fe cf       	rjmp	.-4      	; 0x54e <main+0xca>
        while((PIND & (1<<0)));//Wait for falling edge
 552:	48 99       	sbic	0x09, 0	; 9
 554:	fe cf       	rjmp	.-4      	; 0x552 <main+0xce>
        timer5_init();
 556:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <timer5_init>
        while(!(PIND & (1<<0)));//Wait for rising edge
 55a:	48 9b       	sbis	0x09, 0	; 9
 55c:	fe cf       	rjmp	.-4      	; 0x55a <main+0xd6>
        result3 = TCNT5;
 55e:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 562:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 566:	50 93 06 02 	sts	0x0206, r21	; 0x800206 <result3+0x1>
 56a:	40 93 05 02 	sts	0x0205, r20	; 0x800205 <result3>
        lcd_print(2,8,result3,5);
 56e:	25 e0       	ldi	r18, 0x05	; 5
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	68 e0       	ldi	r22, 0x08	; 8
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_print>
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	91 ee       	ldi	r25, 0xE1	; 225
 57e:	24 e0       	ldi	r18, 0x04	; 4
 580:	81 50       	subi	r24, 0x01	; 1
 582:	90 40       	sbci	r25, 0x00	; 0
 584:	20 40       	sbci	r18, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <main+0xfc>
 588:	00 c0       	rjmp	.+0      	; 0x58a <main+0x106>
 58a:	00 00       	nop
        timer5_reset();
 58c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <timer5_reset>
        if(result1 >= red_min && result1 <= red_max)
 590:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <result1>
 594:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <result1+0x1>
 598:	28 5c       	subi	r18, 0xC8	; 200
 59a:	32 43       	sbci	r19, 0x32	; 50
 59c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <result2>
 5a0:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <result2+0x1>
 5a4:	29 38       	cpi	r18, 0x89	; 137
 5a6:	33 41       	sbci	r19, 0x13	; 19
 5a8:	a8 f4       	brcc	.+42     	; 0x5d4 <main+0x150>
            if(result2 >= 21000)
 5aa:	88 30       	cpi	r24, 0x08	; 8
 5ac:	92 45       	sbci	r25, 0x52	; 82
 5ae:	1c f0       	brlt	.+6      	; 0x5b6 <main+0x132>
            colour = 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
            colour = 2;
 5b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
        else
        {
            colour = 0;
        }
        
        if(colour == 1)
 5b6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	09 f5       	brne	.+66     	; 0x600 <main+0x17c>
        {
            PORTK |= 0x38;
 5be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 5c2:	88 63       	ori	r24, 0x38	; 56
 5c4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
            PORTK &= ~(1<<3);
 5c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 5cc:	87 7f       	andi	r24, 0xF7	; 247
            PORTK |= 0x38;
            PORTK &= ~(1<<5);
        }
        else
        {
            PORTK |= 0x38;
 5ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 5d2:	66 cf       	rjmp	.-308    	; 0x4a0 <main+0x1c>
        else if(result2 >= green_min && result2 <= green_max)
 5d4:	80 55       	subi	r24, 0x50	; 80
 5d6:	96 44       	sbci	r25, 0x46	; 70
 5d8:	89 38       	cpi	r24, 0x89	; 137
 5da:	93 41       	sbci	r25, 0x13	; 19
 5dc:	10 f4       	brcc	.+4      	; 0x5e2 <main+0x15e>
            colour = 2;
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	e8 cf       	rjmp	.-48     	; 0x5b2 <main+0x12e>
        else if(result3 >= blue_min && result3 <= blue_max)
 5e2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <result3>
 5e6:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <result3+0x1>
 5ea:	88 59       	subi	r24, 0x98	; 152
 5ec:	9a 43       	sbci	r25, 0x3A	; 58
 5ee:	81 3a       	cpi	r24, 0xA1	; 161
 5f0:	9f 40       	sbci	r25, 0x0F	; 15
 5f2:	18 f4       	brcc	.+6      	; 0x5fa <main+0x176>
            colour = 3;
 5f4:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <_edata>
 5f8:	de cf       	rjmp	.-68     	; 0x5b6 <main+0x132>
            colour = 0;
 5fa:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 5fe:	db cf       	rjmp	.-74     	; 0x5b6 <main+0x132>
        else if(colour == 2)
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	49 f4       	brne	.+18     	; 0x616 <main+0x192>
            PORTK |= 0x38;
 604:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 608:	88 63       	ori	r24, 0x38	; 56
 60a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
            PORTK &= ~(1<<4);
 60e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 612:	8f 7e       	andi	r24, 0xEF	; 239
 614:	dc cf       	rjmp	.-72     	; 0x5ce <main+0x14a>
        else if(colour == 3)
 616:	83 30       	cpi	r24, 0x03	; 3
 618:	49 f4       	brne	.+18     	; 0x62c <main+0x1a8>
            PORTK |= 0x38;
 61a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 61e:	88 63       	ori	r24, 0x38	; 56
 620:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
            PORTK &= ~(1<<5);
 624:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 628:	8f 7d       	andi	r24, 0xDF	; 223
 62a:	d1 cf       	rjmp	.-94     	; 0x5ce <main+0x14a>
            PORTK |= 0x38;
 62c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 630:	88 63       	ori	r24, 0x38	; 56
 632:	cd cf       	rjmp	.-102    	; 0x5ce <main+0x14a>

00000634 <__udivmodhi4>:
 634:	aa 1b       	sub	r26, r26
 636:	bb 1b       	sub	r27, r27
 638:	51 e1       	ldi	r21, 0x11	; 17
 63a:	07 c0       	rjmp	.+14     	; 0x64a <__udivmodhi4_ep>

0000063c <__udivmodhi4_loop>:
 63c:	aa 1f       	adc	r26, r26
 63e:	bb 1f       	adc	r27, r27
 640:	a6 17       	cp	r26, r22
 642:	b7 07       	cpc	r27, r23
 644:	10 f0       	brcs	.+4      	; 0x64a <__udivmodhi4_ep>
 646:	a6 1b       	sub	r26, r22
 648:	b7 0b       	sbc	r27, r23

0000064a <__udivmodhi4_ep>:
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	5a 95       	dec	r21
 650:	a9 f7       	brne	.-22     	; 0x63c <__udivmodhi4_loop>
 652:	80 95       	com	r24
 654:	90 95       	com	r25
 656:	bc 01       	movw	r22, r24
 658:	cd 01       	movw	r24, r26
 65a:	08 95       	ret

0000065c <_exit>:
 65c:	f8 94       	cli

0000065e <__stop_program>:
 65e:	ff cf       	rjmp	.-2      	; 0x65e <__stop_program>
