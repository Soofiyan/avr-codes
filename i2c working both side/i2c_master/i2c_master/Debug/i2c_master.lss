
i2c_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800204  00800204  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed6  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c37  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053c  00000000  00000000  00001ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000614  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015b  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002c37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 30       	cpi	r26, 0x06	; 6
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	67 d0       	rcall	.+206    	; 0x1ee <main>
 120:	a4 c0       	rjmp	.+328    	; 0x26a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <TWI_init_master>:
{
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
	while((TWSR & 0xF8)!= 0x10); // Check for the acknowledgement
}
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 12a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 12e:	08 95       	ret

00000130 <TWI_start>:
 130:	84 ea       	ldi	r24, 0xA4	; 164
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 23       	and	r24, r24
 13e:	ec f7       	brge	.-6      	; 0x13a <TWI_start+0xa>
 140:	e9 eb       	ldi	r30, 0xB9	; 185
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	e1 f7       	brne	.-8      	; 0x144 <TWI_start+0x14>
 14c:	08 95       	ret

0000014e <TWI_write_address>:

void TWI_write_address(unsigned char data)
{
	TWDR=data;  // Address and write instruction
 14e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
 158:	ec eb       	ldi	r30, 0xBC	; 188
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	ec f7       	brge	.-6      	; 0x15c <TWI_write_address+0xe>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
 162:	e9 eb       	ldi	r30, 0xB9	; 185
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 7f       	andi	r24, 0xF8	; 248
 16a:	88 31       	cpi	r24, 0x18	; 24
 16c:	e1 f7       	brne	.-8      	; 0x166 <TWI_write_address+0x18>
}
 16e:	08 95       	ret

00000170 <TWI_read_address>:

void TWI_read_address(unsigned char data)
{
	TWDR=data;  // Address and read instruction
 170:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 174:	84 e8       	ldi	r24, 0x84	; 132
 176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
 17a:	ec eb       	ldi	r30, 0xBC	; 188
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	ec f7       	brge	.-6      	; 0x17e <TWI_read_address+0xe>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknowledgement
 184:	e9 eb       	ldi	r30, 0xB9	; 185
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 7f       	andi	r24, 0xF8	; 248
 18c:	80 34       	cpi	r24, 0x40	; 64
 18e:	e1 f7       	brne	.-8      	; 0x188 <TWI_read_address+0x18>
}
 190:	08 95       	ret

00000192 <TWI_write_data>:

void TWI_write_data(unsigned char data)
{
	TWDR=data;  // put data in TWDR
 192:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 196:	84 e8       	ldi	r24, 0x84	; 132
 198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
 19c:	ec eb       	ldi	r30, 0xBC	; 188
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	ec f7       	brge	.-6      	; 0x1a0 <TWI_write_data+0xe>
	while((TWSR & 0xF8) != 0x28); // Check for the acknowledgement
 1a6:	e9 eb       	ldi	r30, 0xB9	; 185
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 7f       	andi	r24, 0xF8	; 248
 1ae:	88 32       	cpi	r24, 0x28	; 40
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <TWI_write_data+0x18>
}
 1b2:	08 95       	ret

000001b4 <TWI_read_data>:

void TWI_read_data(void)
{
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);    // Clear TWI interrupt flag,Enable TWI
 1b4:	84 ec       	ldi	r24, 0xC4	; 196
 1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
 1ba:	ec eb       	ldi	r30, 0xBC	; 188
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 23       	and	r24, r24
 1c2:	ec f7       	brge	.-6      	; 0x1be <TWI_read_data+0xa>
	while((TWSR & 0xF8) != 0x50); // Check for the acknowledgement
 1c4:	e9 eb       	ldi	r30, 0xB9	; 185
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	88 7f       	andi	r24, 0xF8	; 248
 1cc:	80 35       	cpi	r24, 0x50	; 80
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <TWI_read_data+0x14>
	recv_data=TWDR;
 1d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 1d4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <recv_data>
	PORTB=recv_data;
 1d8:	85 b9       	out	0x05, r24	; 5
 1da:	08 95       	ret

000001dc <TWI_stop>:
}

void TWI_stop(void)
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 1dc:	84 e9       	ldi	r24, 0x94	; 148
 1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
 1e2:	ec eb       	ldi	r30, 0xBC	; 188
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	84 ff       	sbrs	r24, 4
 1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <TWI_stop+0xa>
 1ec:	08 95       	ret

000001ee <main>:
unsigned char address=0x20, read=1, write=0;
unsigned char write_data=0x01, recv_data;

int main(void)
{	
	TWI_init_master();   // Function to initialize TWI
 1ee:	9a df       	rcall	.-204    	; 0x124 <TWI_init_master>
	DDRB=0xFF;
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF;
 1f4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	9c e2       	ldi	r25, 0x2C	; 44
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0xe>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x18>
 206:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0x00;
 208:	15 b8       	out	0x05, r1	; 5
	while(1)
	{
		if(write_data==0x00)
		write_data=1;
 20a:	c1 e0       	ldi	r28, 0x01	; 1
	PORTB = 0xFF;
	_delay_ms(1000);
	PORTB = 0x00;
	while(1)
	{
		if(write_data==0x00)
 20c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 210:	81 11       	cpse	r24, r1
 212:	02 c0       	rjmp	.+4      	; 0x218 <main+0x2a>
		write_data=1;
 214:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__data_start>
		// Function to send start condition
		TWI_start();
 218:	8b df       	rcall	.-234    	; 0x130 <TWI_start>
		// Function to write address and data direction bit(write) on SDA
		TWI_write_address(address+write);
 21a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <address>
 21e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 222:	89 0f       	add	r24, r25
 224:	94 df       	rcall	.-216    	; 0x14e <TWI_write_address>
		// Function to write data in slave
		TWI_write_data(write_data);
 226:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 22a:	b3 df       	rcall	.-154    	; 0x192 <TWI_write_data>
		// Function to send stop condition
		TWI_stop();
 22c:	d7 df       	rcall	.-82     	; 0x1dc <TWI_stop>
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	9f e8       	ldi	r25, 0x8F	; 143
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x44>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x4a>
 238:	00 00       	nop


		_delay_ms(10);  // Delay of 10 mili second
 		TWI_start();
 23a:	7a df       	rcall	.-268    	; 0x130 <TWI_start>
		// 		// Function to write address and data direction bit(read) on SDA
 		TWI_read_address(address+read);
 23c:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <address>
 240:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <read>
 244:	89 0f       	add	r24, r25
 		TWI_read_data();
 246:	94 df       	rcall	.-216    	; 0x170 <TWI_read_address>
 248:	b5 df       	rcall	.-150    	; 0x1b4 <TWI_read_data>
		// 		// Function to read data from slave
 		TWI_stop();
 24a:	c8 df       	rcall	.-112    	; 0x1dc <TWI_stop>
 24c:	9f ef       	ldi	r25, 0xFF	; 255
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	8c e2       	ldi	r24, 0x2C	; 44
 252:	91 50       	subi	r25, 0x01	; 1
 254:	20 40       	sbci	r18, 0x00	; 0
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x64>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x6e>
 25c:	00 00       	nop
 25e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
		_delay_ms(1000);

		write_data = write_data * 2;
 262:	88 0f       	add	r24, r24
 264:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 268:	d1 cf       	rjmp	.-94     	; 0x20c <main+0x1e>

0000026a <_exit>:
	}
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
